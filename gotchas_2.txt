Try to guess the output/return value and if you fail try to understand the result!!!

Note: the ones marked with '*' are hard.

31. 
function foo(a, b, c) {
    console.log(arguments[0] === a);
    console.log(arguments[1] === b);
    console.log(arguments[2] === c);
}
foo(1, undefined, false)

32.
function foo(a, b, c) {
    arguments.push(2)
    console.log(arguments)
}
foo();                                  // REMEMBER: arguments object is not an array

33. 
function a() {
    console.log('Inside A')
    function b(){
      console.log('Inside B')
    }

    return b();
}

var s = a();
s();

34.
function a() {
    console.log('Inside A')
    function b(){
      console.log('Inside B')
    }

    return b;
}

var s = a();
s();

35. 
(function f(a) {
  console.log('This is an automatically called function with parameter', a);
})(108)

36. 
var add = (function () {
  var counter = 0;
  return function () {counter += 1; return counter}
})();

add();
add();
add();
console.log(counter)

37.
const counter = 0;
var add = (function () {
  return function () {counter += 1; return counter}
})();

add();
add();
add();
console.log(counter);

38.
{
  const x = 1;
  let y = 2;
  var z = 3;
}

console.log(z);
console.log(x)  // or console.log(y)

39.
function logArrayElements(element, index, array) {
  console.log('a[' + index + '] = ' + element);
}


[2, 5, 4, 9].forEach(logArrayElements);

40.
function logArrayElements(element, index, array) {
  console.log('a[' + index + '] = ' + element);
}

[2, , , 9].forEach(logArrayElements);

41â€¤
function foo() {
    return {
        name: 'John',
        surname: 'Snow',
        getName() {
            return this.name
        }
    }
}
console.log(foo().getName());
console.log(foo().getName.call({
    name: 'Tireon',
    surname: 'Lanester'
}));

42. 
function foo() {
    return {
        name: 'bar',
        bar() {
            return {
                name: 'baz',
                baz() {
                    console.log(this)
                }
            }
        }
    }
}
console.log(foo().bar().baz())
cosnole.log(foo().bar().baz.apply())

43. 
const a = [1, 2, 3, 4];
a.length = 2
console.log(a[3])

44. Number(' 12')

45. Number('0x77') === 0x77

46. isNaN(' ')

47. Infinity / 6

48. Infinity / -256

49. Infinity / Infinity

50. parseInt('.2')

51. parseInt('0.2')

52. null + undefined

53. null + true

54. null + false

55. null + NaN

56. 'hello' + NaN

57. -([])

58. -new String('hello')

59. -'234'

60. -([2])

61. -([2, 3])
